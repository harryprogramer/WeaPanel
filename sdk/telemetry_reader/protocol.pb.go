package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *Header            `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Packet         []*TelemetryPacket `protobuf:"bytes,2,rep,name=packet" json:"packet,omitempty"`
	HardwarePacket []*HardwarePacket  `protobuf:"bytes,3,rep,name=hardwarePacket" json:"hardwarePacket,omitempty"`
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *Telemetry) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Telemetry) GetPacket() []*TelemetryPacket {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *Telemetry) GetHardwarePacket() []*HardwarePacket {
	if x != nil {
		return x.HardwarePacket
	}
	return nil
}

type TelemetryPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temperature *float32 `protobuf:"fixed32,1,req,name=temperature" json:"temperature,omitempty"`
	Humidity    *uint32  `protobuf:"varint,2,req,name=humidity" json:"humidity,omitempty"`
	Mq135       *uint32  `protobuf:"varint,3,req,name=mq135" json:"mq135,omitempty"`
	Mq7         *uint32  `protobuf:"varint,4,req,name=mq7" json:"mq7,omitempty"`
	Mq2         *uint32  `protobuf:"varint,5,req,name=mq2" json:"mq2,omitempty"`
	Pressure    *uint32  `protobuf:"varint,6,req,name=pressure" json:"pressure,omitempty"`
	Date        *Date    `protobuf:"bytes,7,req,name=date" json:"date,omitempty"`
}

func (x *TelemetryPacket) Reset() {
	*x = TelemetryPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryPacket) ProtoMessage() {}

func (x *TelemetryPacket) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryPacket.ProtoReflect.Descriptor instead.
func (*TelemetryPacket) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *TelemetryPacket) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *TelemetryPacket) GetHumidity() uint32 {
	if x != nil && x.Humidity != nil {
		return *x.Humidity
	}
	return 0
}

func (x *TelemetryPacket) GetMq135() uint32 {
	if x != nil && x.Mq135 != nil {
		return *x.Mq135
	}
	return 0
}

func (x *TelemetryPacket) GetMq7() uint32 {
	if x != nil && x.Mq7 != nil {
		return *x.Mq7
	}
	return 0
}

func (x *TelemetryPacket) GetMq2() uint32 {
	if x != nil && x.Mq2 != nil {
		return *x.Mq2
	}
	return 0
}

func (x *TelemetryPacket) GetPressure() uint32 {
	if x != nil && x.Pressure != nil {
		return *x.Pressure
	}
	return 0
}

func (x *TelemetryPacket) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type HardwarePacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memory        *uint32 `protobuf:"varint,1,req,name=memory" json:"memory,omitempty"`
	FBlockVoltage *uint32 `protobuf:"varint,2,req,name=f_block_voltage,json=fBlockVoltage" json:"f_block_voltage,omitempty"`
	SBlockVoltage *uint32 `protobuf:"varint,3,req,name=s_block_voltage,json=sBlockVoltage" json:"s_block_voltage,omitempty"`
	Dht           *bool   `protobuf:"varint,4,req,name=dht" json:"dht,omitempty"`
	Sdcard        *bool   `protobuf:"varint,5,req,name=sdcard" json:"sdcard,omitempty"`
	FirstBlock    *bool   `protobuf:"varint,6,req,name=firstBlock" json:"firstBlock,omitempty"`
	SecondBlock   *bool   `protobuf:"varint,7,req,name=secondBlock" json:"secondBlock,omitempty"`
	Mq135         *bool   `protobuf:"varint,8,req,name=mq135" json:"mq135,omitempty"`
	Mq7           *bool   `protobuf:"varint,9,req,name=mq7" json:"mq7,omitempty"`
	Mq2           *bool   `protobuf:"varint,10,req,name=mq2" json:"mq2,omitempty"`
	Barometer     *bool   `protobuf:"varint,11,req,name=barometer" json:"barometer,omitempty"`
	Date          *Date   `protobuf:"bytes,12,req,name=date" json:"date,omitempty"`
}

func (x *HardwarePacket) Reset() {
	*x = HardwarePacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwarePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwarePacket) ProtoMessage() {}

func (x *HardwarePacket) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwarePacket.ProtoReflect.Descriptor instead.
func (*HardwarePacket) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *HardwarePacket) GetMemory() uint32 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

func (x *HardwarePacket) GetFBlockVoltage() uint32 {
	if x != nil && x.FBlockVoltage != nil {
		return *x.FBlockVoltage
	}
	return 0
}

func (x *HardwarePacket) GetSBlockVoltage() uint32 {
	if x != nil && x.SBlockVoltage != nil {
		return *x.SBlockVoltage
	}
	return 0
}

func (x *HardwarePacket) GetDht() bool {
	if x != nil && x.Dht != nil {
		return *x.Dht
	}
	return false
}

func (x *HardwarePacket) GetSdcard() bool {
	if x != nil && x.Sdcard != nil {
		return *x.Sdcard
	}
	return false
}

func (x *HardwarePacket) GetFirstBlock() bool {
	if x != nil && x.FirstBlock != nil {
		return *x.FirstBlock
	}
	return false
}

func (x *HardwarePacket) GetSecondBlock() bool {
	if x != nil && x.SecondBlock != nil {
		return *x.SecondBlock
	}
	return false
}

func (x *HardwarePacket) GetMq135() bool {
	if x != nil && x.Mq135 != nil {
		return *x.Mq135
	}
	return false
}

func (x *HardwarePacket) GetMq7() bool {
	if x != nil && x.Mq7 != nil {
		return *x.Mq7
	}
	return false
}

func (x *HardwarePacket) GetMq2() bool {
	if x != nil && x.Mq2 != nil {
		return *x.Mq2
	}
	return false
}

func (x *HardwarePacket) GetBarometer() bool {
	if x != nil && x.Barometer != nil {
		return *x.Barometer
	}
	return false
}

func (x *HardwarePacket) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime          *Date   `protobuf:"bytes,1,req,name=startTime" json:"startTime,omitempty"`
	StationIp          *string `protobuf:"bytes,2,req,name=station_ip,json=stationIp" json:"station_ip,omitempty"`
	StationMac         *string `protobuf:"bytes,3,req,name=station_mac,json=stationMac" json:"station_mac,omitempty"`
	StationDns         *string `protobuf:"bytes,4,req,name=station_dns,json=stationDns" json:"station_dns,omitempty"`
	StationGateway     *string `protobuf:"bytes,5,req,name=station_gateway,json=stationGateway" json:"station_gateway,omitempty"`
	SysVersion         *string `protobuf:"bytes,6,req,name=sys_version,json=sysVersion" json:"sys_version,omitempty"`
	StationUuid        *string `protobuf:"bytes,7,req,name=station_uuid,json=stationUuid" json:"station_uuid,omitempty"`
	ServerVersion      *string `protobuf:"bytes,8,req,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	TelemetryPluginVer *string `protobuf:"bytes,9,req,name=telemetry_plugin_ver,json=telemetryPluginVer" json:"telemetry_plugin_ver,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *Header) GetStartTime() *Date {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Header) GetStationIp() string {
	if x != nil && x.StationIp != nil {
		return *x.StationIp
	}
	return ""
}

func (x *Header) GetStationMac() string {
	if x != nil && x.StationMac != nil {
		return *x.StationMac
	}
	return ""
}

func (x *Header) GetStationDns() string {
	if x != nil && x.StationDns != nil {
		return *x.StationDns
	}
	return ""
}

func (x *Header) GetStationGateway() string {
	if x != nil && x.StationGateway != nil {
		return *x.StationGateway
	}
	return ""
}

func (x *Header) GetSysVersion() string {
	if x != nil && x.SysVersion != nil {
		return *x.SysVersion
	}
	return ""
}

func (x *Header) GetStationUuid() string {
	if x != nil && x.StationUuid != nil {
		return *x.StationUuid
	}
	return ""
}

func (x *Header) GetServerVersion() string {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return ""
}

func (x *Header) GetTelemetryPluginVer() string {
	if x != nil && x.TelemetryPluginVer != nil {
		return *x.TelemetryPluginVer
	}
	return ""
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Millis  *uint32 `protobuf:"varint,1,req,name=millis" json:"millis,omitempty"`
	Seconds *uint32 `protobuf:"varint,2,req,name=seconds" json:"seconds,omitempty"`
	Minutes *uint32 `protobuf:"varint,3,req,name=minutes" json:"minutes,omitempty"`
	Hours   *uint32 `protobuf:"varint,4,req,name=hours" json:"hours,omitempty"`
	Day     *uint32 `protobuf:"varint,5,req,name=day" json:"day,omitempty"`
	Month   *uint32 `protobuf:"varint,6,req,name=month" json:"month,omitempty"`
	Year    *uint32 `protobuf:"varint,7,req,name=year" json:"year,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *Date) GetMillis() uint32 {
	if x != nil && x.Millis != nil {
		return *x.Millis
	}
	return 0
}

func (x *Date) GetSeconds() uint32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *Date) GetMinutes() uint32 {
	if x != nil && x.Minutes != nil {
		return *x.Minutes
	}
	return 0
}

func (x *Date) GetHours() uint32 {
	if x != nil && x.Hours != nil {
		return *x.Hours
	}
	return 0
}

func (x *Date) GetDay() uint32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *Date) GetMonth() uint32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *Date) GetYear() uint32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

var File_protocol_proto protoreflect.FileDescriptor

var file_protocol_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8f, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x71, 0x31, 0x33, 0x35, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x71, 0x31, 0x33, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x71,
	0x37, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x71, 0x37, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x71, 0x32, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x71, 0x32, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x0e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x68, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x03, 0x64,
	0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x71, 0x31, 0x33, 0x35, 0x18, 0x08, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x71, 0x31,
	0x33, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x71, 0x37, 0x18, 0x09, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x03, 0x6d, 0x71, 0x37, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x71, 0x32, 0x18, 0x0a, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x03, 0x6d, 0x71, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x62, 0x61, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22,
	0xd4, 0x02, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6e, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x22, 0xa4, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x06, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x42, 0x21, 0x5a,
	0x1f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x69, 0x7a, 0x7a,
}

var (
	file_protocol_proto_rawDescOnce sync.Once
	file_protocol_proto_rawDescData = file_protocol_proto_rawDesc
)

func file_protocol_proto_rawDescGZIP() []byte {
	file_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_rawDescData)
	})
	return file_protocol_proto_rawDescData
}

var file_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_protocol_proto_goTypes = []interface{}{
	(*Telemetry)(nil),       // 0: Telemetry
	(*TelemetryPacket)(nil), // 1: TelemetryPacket
	(*HardwarePacket)(nil),  // 2: HardwarePacket
	(*Header)(nil),          // 3: Header
	(*Date)(nil),            // 4: Date
}
var file_protocol_proto_depIdxs = []int32{
	3, // 0: Telemetry.header:type_name -> Header
	1, // 1: Telemetry.packet:type_name -> TelemetryPacket
	2, // 2: Telemetry.hardwarePacket:type_name -> HardwarePacket
	4, // 3: TelemetryPacket.date:type_name -> Date
	4, // 4: HardwarePacket.date:type_name -> Date
	4, // 5: Header.startTime:type_name -> Date
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_protocol_proto_init() }
func file_protocol_proto_init() {
	if File_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwarePacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_proto_depIdxs,
		MessageInfos:      file_protocol_proto_msgTypes,
	}.Build()
	File_protocol_proto = out.File
	file_protocol_proto_rawDesc = nil
	file_protocol_proto_goTypes = nil
	file_protocol_proto_depIdxs = nil
}
